 /** * Opportunistic Connectivity Management Simulator * * Copyright (C) 2007 Hossein Falaki */ 
package ocms.util;

import java.util.PriorityQueue;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileWriter;

/**
  * Logger utility used by all other classes of the simulator to log their events.
  * The log messages generated by different object may be out of order (in terms of 
  * simulation time), therefore the Logger keeps log messages in a set. At the end of
  * simulation when its {@link #flush} method is called it sorts the messages based 
  * on their time of generation and dumps them into the provided logfile.
  *
  * There is a seperate method per log-level. The log-levels are:
  * <i>INFO</i> and <i>DEBUG</i>
  *
  * The class should be initialized before the simulation starts with a call to 
  * {@link #initialize}. 
  *
  * @author     Hossein Falaki
  */
public class Log
{

    /** the log level */
    private static int loglevel;

    /** No logging messages */
    public static int OFF =         -1;

    /** the INFO log level */
    public static int INFO =        0;

    /** the DEBUG log level */
    public static int DEBUG =       1;

    /** The PARANOID log level */
    public static int PARANOID =     2;

    /** Enabling standard output log */
    static boolean sto =      true;

    /** Log level names */
    public static String[] levels = {"INFO", "DEBUG", "PARAN"};

    /** the log filw handler */
    private static PrintWriter logfile;

    /**
      * Initializes the Logger.
      * 
      * @param      level               the log level
      * @param      logfilename         name of the log file
      * @throws     IOException         if the file cannot be opened
      */
    public static void initialize( int level, String logfilename) throws IOException
    {
        logfile = new PrintWriter( new FileWriter( logfilename ) );
        loglevel = level;

    }

    /**
      * Registers the message as an INFO level log message.
      *
      * @param      caller              the time of the log
      * @param      message             the log message
      */
    public static void info(Logger caller, String message)
    {
        if ( loglevel >=  INFO)
        {
            logfile.println( new LogMessage( INFO, caller, message) );
            logfile.flush();
            //System.out.println( new LogMessage( INFO, caller, message) );
        }

    }

    /**
      * Registers the message as a DEBUG level log message.
      *
      * @param      caller              the time of the log
      * @param      message             the log message
      */
    public static void debug(Logger caller, String message)
    {
        if (loglevel >= DEBUG)
        {
            logfile.println( new LogMessage( DEBUG, caller, message) );
            logfile.flush();
        }

    }

    /**
      * Registers the message as a PARANOID level log message.
      *
      * @param      caller              the time of the log
      * @param      message             the log message
      */
    public static void paranoid(Logger caller, String message)
    {
        if (loglevel >=  PARANOID)
        {
            logfile.println( new LogMessage( PARANOID, caller, message) );
            logfile.flush();
        }
    }


    /**
      * Prints to the standard output.
      *
      * @param      message             the log message
      */
    public static void stdout(Logger caller, String message)
    {
        if ( sto )
            System.out.println( caller.getName() + ": " + message);
    }

    /**
      * Disables standard output logs.
      */
    public static void disableSto()
    {
        sto = false;
    }


    /**
      * Flushes the log file and closes it.
      *
      */
    public static void flush()
    {
        logfile.flush();
        logfile.close();
    }
}
